from dotenv import load_dotenv
from yaml_parser import validate_and_fix_yaml
from adopt_generation import adopt_generation
import requests
import json
import os

load_dotenv()

T5_ENDPOINT = os.getenv("T5_ENDPOINT")

class T5Inference:
    """
        Wrapper for sending input to a custom T5 model API that transforms
        sentences into intermediate representations (IMRs).

        Provides:
          - HTTP request to the model endpoint
          - extraction of the relevant raw output
          - postprocessing of the model output into a usable IMR format
        """
    def generate(self, sentence, environment):
        """
        Send a sentence to the T5 model inference endpoint.

        Args:
            sentence (str): The natural language input to be transformed.
            environment (str): Execution environment indicator (e.g., "dev", "prod").
                Currently unused, but accepted for compatibility and future use.

        Returns:
            requests.Response: The HTTP response returned by the T5 model API.

        Raises:
            requests.RequestException: If the HTTP request fails (not explicitly caught here).
        """
        response = requests.post(f"{T5_ENDPOINT}/transform-sentence-to-imr",
                          headers={'accept': 'application/json', 'Content-Type': 'application/json', 'User-Agent': 'Mozilla/5.0'},
                          data=json.dumps({"sentence": sentence}))
        return response


    def get_raw_output(self, response):
        """
        Extract the raw model output from the T5 API response.

        Args:
            response (requests.Response): The response object returned by `generate`.

        Returns:
            str: The raw output string generated by the T5 model.

        Raises:
            KeyError: If 'rawOutput' is missing in the response JSON.
            ValueError: If the response is not JSON-decodable.
        """
        sentence = response.json()
        return sentence['rawOutput']


    def adopt(self, raw_response):
        """
        Validate, fix, and adapt raw model output into the final IMR structure.

        Pipeline:
          1) `validate_and_fix_yaml`: Ensures the output is structured and valid.
          2) `adopt_generation`: Transforms validated data into the target IMR format.

        Args:
            raw_response (str): Raw output string returned by the model.

        Returns:
            dict: The cleaned, structured IMR object ready for downstream use.

        Raises:
            Exception: If parsing or transformation fails downstream.
        """
        result = validate_and_fix_yaml(raw_response)
        result = adopt_generation(result)
        return result

